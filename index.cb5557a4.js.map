{"mappings":"AA0JA,IAAMA,UAAYC,SAASC,cAAc,kBACnCC,SAAWF,SAASC,cAAc,iBACpCE,KAAO,EAcX,SAASC,e,IAAaC,EAAAC,UAAAC,OAAA,YAAAD,UAAA,GAAQA,UAAA,GAAD,EACnBE,EAAW,+BACXC,EAAY,uBACZC,EAAU,mCAEVC,EAAc,IAAIC,gBAAgB,CACpCC,QAASH,EACTP,KAAME,IAGV,OAAOS,MAAM,GAAcC,OAAXP,GAAwBO,OAAbN,EAAU,KAAeM,OAAZJ,IACnCK,MAAK,SAAAC,GACF,IAAIA,EAAKC,GACL,MAAM,IAAIC,MAAMF,EAAKG,YAEzB,OAAOH,EAAKI,M,IAIxB,SAASC,aAAaC,GAClB,OAAOA,EAAIC,KAAI,SAAAC,G,IAAGC,EAAWD,EAAXC,YAAaC,EAAYF,EAAZE,aAAcC,EAAcH,EAAdG,eAAgBC,EAAYJ,EAAZI,a,MAAmB,2FAERd,OAArBW,EAAY,WAE7CX,OAFsDa,EAAe,kEAGxDb,OADba,EAAe,4CAEFb,OADAY,EAAa,2CACAZ,OAAbc,EAAa,gD,IAGzCC,KAAK,G,CAGZ,SAASC,aAGL3B,aAFAD,MAAQ,GAGHa,MAAK,SAAAgB,GACFjC,UAAUkC,mBAAmB,YAAaX,aAAaU,EAAKE,UAEzDF,EAAK7B,MAAQ6B,EAAKG,aACjBjC,SAASkC,UAAUC,QAAQ,YAAa,mB,IAlDxDjC,eACKY,MAAK,SAAAgB,GACFjC,UAAUkC,mBAAmB,YAAaX,aAAaU,EAAKE,UAEzDF,EAAK7B,KAAO6B,EAAKG,aAChBjC,SAASkC,UAAUC,QAAQ,mBAAoB,Y,IAGtDC,OAAM,SAAAC,G,OAASC,QAAQC,IAAI,YAAaF,E","sources":["src/script.js"],"sourcesContent":["//Урок 10.1\n\n// *********Links********* \\\\\n// https://www.postman.com/downloads/\n// https://rickandmortyapi.com/documentation\n// https://www.weatherapi.com/docs/\n\n\n\n\n//Fetch\n\n// fetch(\"https://rickandmortyapi.com/api/character\")\n//       .then(response => console.log(\"then\",response))\n//       .catch(err => console.log(\"catch\", err))\n      \n\n// fetch(\"https://rickandmortyapi.com/api/character\")\n//       .then(data => {\n//         if(!data.ok){\n//             throw new Error(\"return then\")\n//         }\n//         return data.json() \n//       })\n//       .then(result => console.log(result))\n//       .catch(err => console.log(\"catch\", err))\n\n\n\n// Обробка помилок та парсинг відповіді\n\n\n// ***************Практика*************** \\\\\n\n// Потрібно створити функціонал для отримання прогнозу\n// погоди в місті.\n// Використай публічне API https://www.weatherapi.com/docs/\n// Використовуй ендпоінт Forecast для того, щоб отримати\n// прогноз погоди на декілька днів.\n\n// Створи форму в яку користувач:\n// 1 вводить назву міста.\n// 2 обирає на яку кількість днів він хоче отримати прогноз погоди\n// (3, 5 та 7 днів).\n// (Іноді параметр не працює в такому випадку можна зробити\n// пошук на 1, 2 та 3 дні)\n// Приклад форми https://prnt.sc/kFmLOj6gBdv-\n\n// Після сабміту форми відмалюй картки з інформацією\n// отриманою з бекенду.\n// Картка має містити відомості про:\n// 1 Зображення з погодою (icon)\n// 2 Текст з погодою (text)\n// 3 Дату (date)\n// 4 Середню температуру в Цельсія (avgtemp_c)\n// Приклад картки https://prnt.sc/h_p-A6Hty-i-\n\n// !!! ЗВЕРНИ УВАГУ ЩО API_KEY ПІСЛЯ РЕЄСТРАЦІЇ ВАЛІДНИЙ 21 ДЕНЬ !!!.\n\n\n// const searchForm = document.querySelector(\".js-search-form\")\n// const list = document.querySelector(\".js-list\")\n// console.log(searchForm);\n// console.log(list);\n\n// searchForm.addEventListener(\"submit\", handleSearch)\n\n// function handleSearch(event){\n//   event.preventDefault();\n\n//   const { city, days} = event.currentTarget.elements;\n\n//   // console.log(\"city\", city.value);\n//   // console.log(\"days\", days.value);\n\n//   serviceWeather(city.value, days.value)\n//   .then(data => {\n//     list.innerHTML = createMarkup(data.forecast.forecastday)\n//   })\n//   .catch(error => console.log(error))\n//   .finally(() => searchForm.reset())\n// }\n\n// function serviceWeather(city = \"\", days = 1){\n//   const BASE_URL = \"http://api.weatherapi.com/v1\";\n//   const API_KEY = \"47cce444510845a3b5890337232811\";\n\n//   const params = new URLSearchParams({\n//     key: API_KEY,\n//     q: city,\n//     days: days,\n//     lang: \"uk\"\n//   })\n\n//   return fetch(`${BASE_URL}/forecast.json?${params}`)\n//   .then(response => {\n//     if(!response.ok){\n//       throw new Error(response.statusText)\n//     }\n//     return response.json();\n//   })\n// }\n\n// function createMarkup(arr){\n//   return arr.map(({\n//     date,\n//     day: {\n//       avgtemp_c,\n//       condition:{\n//         text, \n//         icon\n//       }\n//     }\n//   }) => `\n//       <li class=\"weather-catd\">\n//           <img src=\"${icon}\" alt=\"${text}\" class=\"weather-icon\"/>\n//           <h2 class=\"date\">${date}</h2>\n//           <h3 class=\"weather-text\">${text}</h3>\n//           <h3 class=\"temperature\">${avgtemp_c}</h3>\n//       </li>\n//   `).join(\"\")\n// }\n\n\n\n\n                                                    // Урок 10.2\n\n\n\n                                                  \n// axios.defaults.header.common[\"x-api-key\"] = \"YOUR_KEY\";\n\n\n\n// Створи фільмотеку з популярними фільмами, для цього використай\n// https://developer.themoviedb.org/reference/trending-movies\n\n// Щоб отримати постер фільму потрібно підставити url\n// з відповіді від бекенду та url з документації\n// https://developer.themoviedb.org/docs/image-basics\n\n// Відмалюй картки з фільмами\n// Приклад картки  => https://prnt.sc/Hi_iLLg7Nd1F\n\n// Реалізуй пагінацію\n// 1 Кнопка \"Load More\"\n// 2 Infinity scroll (https://developer.mozilla.org/en-US/docs/Web/API/Intersection_Observer_API)\n\n\n\n// *********************** Кнопка \"Load More\" ************************** \\\\\n\n\nconst container = document.querySelector(\".js-movie-list\");\nconst loadMore = document.querySelector(\".js-load-more\");\nlet page = 1;\n\n// loadMore.addEventListener(\"click\", onLoadMore)\n\nserviceMovie()\n    .then(data => {\n        container.insertAdjacentHTML(\"beforeend\", createMarkup(data.results));\n\n        if(data.page < data.total_pages) { // data.page < 500\n            loadMore.classList.replace(\"load-more-hidden\", \"load-more\")\n        }\n    })\n    .catch(error => console.log(\"Error!!!!\", error))\n\nfunction serviceMovie(page = 1) {\n    const BASE_URL = \"https://api.themoviedb.org/3\";\n    const END_POINT = \"/trending/movie/week\";\n    const API_KEY = \"345007f9ab440e5b86cef51be6397df1\";\n\n    const queryParams = new URLSearchParams({\n        api_key: API_KEY,\n        page: page\n    })\n\n    return fetch(`${BASE_URL}${END_POINT}?${queryParams}`)\n        .then(resp => {\n            if(!resp.ok) {\n                throw new Error(resp.statusText)\n            }\n            return resp.json()\n        })\n}\n\nfunction createMarkup(arr) {\n    return arr.map(({ poster_path, release_date, original_title, vote_average }) => `\n        <li class=\"movie-card\">\n            <img src=\"https://image.tmdb.org/t/p/w300${poster_path}\" alt=\"${original_title}\">\n            <div class=\"movie-info\">\n                <h2>${original_title}</h2>\n                <p>Release date: ${release_date}</p>\n                <p>Vote average: ${vote_average}</p>\n            </div>\n        </li>\n    `).join(\"\")\n}\n\nfunction onLoadMore(){\n    page += 1;\n\n    serviceMovie(page)\n        .then(data => {\n            container.insertAdjacentHTML(\"beforeend\", createMarkup(data.results))\n\n            if(data.page >= data.total_pages){\n                loadMore.classList.replace(\"load-more\", \"load-more-hidden\")\n            }\n        })\n}\n\n\n\n// ********************************Infinity scroll ********************** \\\\\n\n// const container = document.querySelector(\".js-movie-list\");\n// const guard = document.querySelector(\".js-guard\");\n// let page = 499;\n\n// const options = {\n//     root: null,\n//     rootMargin: \"300px\",\n//     threshold: 0\n// }\n\n\n// const observer = new IntersectionObserver(handlePagination, options)\n\n\n// serviceMovie()\n//     .then(data => {\n//         container.insertAdjacentHTML(\"beforeend\", createMarkup(data.results))\n\n//         if(data.page < data.total_pages) {\n//             observer.observe(guard)\n//         }\n//     })\n//     .catch(error => console.log(error))\n\n// function serviceMovie(page = 1) {\n//     const BASE_URL = \"https://api.themoviedb.org/3\";\n//     const END_POINT = \"/trending/movie/week\";\n//     const API_KEY = \"345007f9ab440e5b86cef51be6397df1\";\n\n//     const queryParams = new URLSearchParams({\n//         api_key: API_KEY,\n//         page: page\n//     })\n\n//     return fetch(`${BASE_URL}${END_POINT}?${queryParams}`)\n//         .then(resp => {\n//             if(!resp.ok) {\n//                 throw new Error(resp.statusText)\n//             }\n//             return resp.json()\n//         })\n// }\n\n// function createMarkup(arr) {\n//     return arr.map(({ poster_path, release_date, original_title, vote_average }) => `\n//         <li class=\"movie-card\">\n//             <img src=\"https://image.tmdb.org/t/p/w300${poster_path}\" alt=\"${original_title}\">\n//             <div class=\"movie-info\">\n//                 <h2>${original_title}</h2>\n//                 <p>Release date: ${release_date}</p>\n//                 <p>Vote average: ${vote_average}</p>\n//             </div>\n//         </li>\n//     `).join(\"\")\n// }\n\n// function handlePagination(entries, observer) {\n//     entries.forEach((entry) => {\n//         console.log(entry);\n//         if(entry.isIntersecting) {\n//             console.log(\"ok\");\n//             page += 1;\n//             serviceMovie(page)\n//                 .then((data) => {\n//                     container.insertAdjacentHTML(\"beforeend\", createMarkup(data.results))\n\n//                     if(data.page >= data.total_pages) {\n//                         observer.unobserve(entry.target)\n//                     }\n//                 })\n//                 .catch(error => console.log(error))\n//         }\n//     })\n// }\n\n\n// const selectors = {\n//   button: document.querySelector(\"[data-start]\"),\n//   days: document.querySelector(\"[data-days]\"),\n//   hours: document.querySelector(\"[data-hours]\"),\n//   minutes: document.querySelector(\"[data-minutes]\"),\n//   seconds: document.querySelector(\"[data-seconds]\"),\n// }\n\n\n// const options = {\n//   enableTime: true,\n//   time_24hr: true,\n//   defaultDate: new Date(),\n//   minuteIncrement: 1,\n//   onClose(selectedDates) {\n//       const currentDate = new Date();\n\n//       if(selectedDates[0] - currentDate <= 0) {\n//           console.log(\"false\");\n//           selectors.button.disabled = true;\n//           return;\n//       } else {\n//           selectors.button.disabled = false;\n//       }\n\n//       selectors.button.addEventListener(\"click\", () => {\n//           selectors.button.disabled = true;\n//           const id = setInterval(() => {\n//               timer(selectedDates[0], id)\n//           }, 1000)\n//       })\n//   }\n// };\n\n// flatpickr(\"#datetime-picker\", options);\n\n// function timer(selectDate, id) {\n//   const currentDate = new Date();\n//   const deltaTime = selectDate - currentDate;\n\n//   if(deltaTime <= 0) {\n//       clearInterval(id)\n//       return;\n//   }\n\n//   const days = deltaTime > 0 ? Math.floor(deltaTime / 1000 / 60 / 60 / 24) : 0;\n//   const hours = deltaTime > 0 ? Math.floor(deltaTime / 1000 / 60 / 60 ) % 24 : 0;\n//   const minutes = deltaTime > 0 ? Math.floor(deltaTime / 1000 / 60 ) % 60 : 0;\n//   const seconds = deltaTime > 0 ? Math.floor(deltaTime / 1000 ) % 60 : 0;\n\n//   selectors.seconds.textContent = seconds < 10 ? `0${seconds}` : seconds;\n//   selectors.minutes.textContent = minutes < 10 ? `0${minutes}` : minutes\n//   selectors.hours.textContent = hours < 10 ? `0${hours}` : hours\n//   selectors.days.textContent = days < 10 ? `0${days}` : days\n// }"],"names":["container","document","querySelector","loadMore","page","serviceMovie","page1","arguments","length","BASE_URL","END_POINT","API_KEY","queryParams","URLSearchParams","api_key","fetch","concat","then","resp","ok","Error","statusText","json","createMarkup","arr","map","param","poster_path","release_date","original_title","vote_average","join","onLoadMore","data","insertAdjacentHTML","results","total_pages","classList","replace","catch","error","console","log"],"version":3,"file":"index.cb5557a4.js.map"}